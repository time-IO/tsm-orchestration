---
version: "3.9"
services:

  # =================================================================
  # SETUP worker (topic: thing_creation)
  # =================================================================

  # brief: create a new bucket for a Thing in S3 storage
  worker-object-storage-setup:
    image: "registry.hzdr.de/ufz-tsm/tsm-dispatcher/dispatcher:${DISPATCHER_IMAGE_TAG}"
    restart: "${RESTART}"
    depends_on:
      mqtt-broker:
        condition: "service_healthy"
      object-storage:
        condition: "service_healthy"
    environment:
      LOG_LEVEL: "${LOG_LEVEL}"
      TOPIC: "thing_creation"
      MQTT_BROKER: "mqtt-broker:1883"
      MQTT_USER: "${MQTT_USER}"
      MQTT_PASSWORD: "${MQTT_PASSWORD}"
      MINIO_SECURE: "${MINIO_SECURE}"
      MINIO_URL: "${MINIO_HOST}"
      MINIO_ACCESS_KEY: "${MINIO_ROOT_USER}"
      MINIO_SECURE_KEY: "${MINIO_ROOT_PASSWORD}"
      S3MAP_DB_URL: "postgresql://\
        ${S3MAP_POSTGRES_USER}:\
        ${S3MAP_POSTGRES_PASS}@\
        ${S3MAP_POSTGRES_HOST}/\
        ${S3MAP_POSTGRES_DB}"
    command:
      - "create-thing-in-minio"


  # Summary
  # =======
  # brief:  create things in project-DB
  #
  # Description
  # ===========
  # - create a new DB for a project, if not it not already exist
  # - create/update a thing in DB
  # - create/update frost view for the thing
  worker-db-setup:
    image: "registry.hzdr.de/ufz-tsm/tsm-dispatcher/dispatcher:${DISPATCHER_IMAGE_TAG}"
    restart: "${RESTART}"
    depends_on:
      mqtt-broker:
        condition: "service_healthy"
      database:
        condition: "service_healthy"
    environment:
      LOG_LEVEL: "${LOG_LEVEL}"
      TOPIC: "thing_creation"
      MQTT_BROKER: "mqtt-broker:1883"
      MQTT_USER: "${MQTT_USER}"
      MQTT_PASSWORD: "${MQTT_PASSWORD}"
      DATABASE_URL: "postgresql://\
        ${CREATEDB_POSTGRES_USER}:\
        ${CREATEDB_POSTGRES_PASSWORD}@\
        ${CREATEDB_POSTGRES_HOST}/\
        ${CREATEDB_POSTGRES_DATABASE}"
      SMS_URL: "${SMS_URL}"
      CV_URL: "${CV_URL}"
    command:
      - "create-thing-in-postgres"


  worker-frost-setup:
    image: "registry.hzdr.de/ufz-tsm/tsm-dispatcher/dispatcher:${DISPATCHER_IMAGE_TAG}"
    restart: "${RESTART}"
    depends_on:
      mqtt-broker:
        condition: "service_healthy"
      database:
        condition: "service_healthy"
    volumes:
      - "./data/tomcat/context:/home/appuser/app/src/CreateNewFrostInstanceAction/tomcat/context_files:rw"
    environment:
      LOG_LEVEL: "${LOG_LEVEL}"
      TOPIC: "thing_creation"
      MQTT_BROKER: "mqtt-broker:1883"
      MQTT_USER: "${MQTT_USER}"
      MQTT_PASSWORD: "${MQTT_PASSWORD}"
      TOMCAT_PROXY_URL: "${TOMCAT_PROXY_URL}"
    command:
      - "create-frost-instance"

  # brief: Add user to mqtt_auth DB, so they are allowed to use mqtt
  worker-mqtt-user-creation:
    image: "registry.hzdr.de/ufz-tsm/tsm-dispatcher/dispatcher:${DISPATCHER_IMAGE_TAG}"
    restart: on-failure
    depends_on:
      mqtt-broker:
        condition: "service_healthy"
      database:
        condition: "service_healthy"
    environment:
      LOG_LEVEL: "${LOG_LEVEL}"
      TOPIC: "thing_creation"
      MQTT_BROKER: "mqtt-broker:1883"
      MQTT_USER: "${MQTT_USER}"
      MQTT_PASSWORD: "${MQTT_PASSWORD}"
      DATABASE_URL: "postgresql://\
        ${CREATEDB_POSTGRES_USER}:\
        ${CREATEDB_POSTGRES_PASSWORD}@\
        ${CREATEDB_POSTGRES_HOST}/\
        ${CREATEDB_POSTGRES_DATABASE}"
    command:
      - "create-mqtt-user"


  worker-grafana-dashboard:
    image: "registry.hzdr.de/ufz-tsm/tsm-dispatcher/dispatcher:${DISPATCHER_IMAGE_TAG}"
    restart: "${RESTART}"
    depends_on:
      mqtt-broker:
        condition: "service_healthy"
      visualization:
        condition: "service_started"
    environment:
      LOG_LEVEL: "${LOG_LEVEL}"
      TOPIC: "thing_creation"
      MQTT_BROKER: "mqtt-broker:1883"
      MQTT_USER: "${MQTT_USER}"
      MQTT_PASSWORD: "${MQTT_PASSWORD}"
      GRAFANA_URL: "${GRAFANA_URL}"
      GRAFANA_USER: "${GRAFANA_USER}"
      GRAFANA_PASSWORD: "${GRAFANA_PASSWORD}"
      GRAFANA_DEFAULT_DATASOURCE_SSLMODE: "${GRAFANA_DEFAULT_DATASOURCE_SSLMODE}"
    command:
      - "create-thing-in-grafana"


  # =================================================================
  # Ingest worker (incoming observations)
  # =================================================================

  worker-file-ingest:
    image: "registry.hzdr.de/ufz-tsm/tsm-dispatcher/dispatcher:${DISPATCHER_IMAGE_TAG}"
    restart: "on-failure"
    depends_on:
      mqtt-broker:
        condition: "service_healthy"
      object-storage:
        condition: "service_healthy"
      basic-demo-scheduler:
        condition: "service_healthy"
    environment:
      LOG_LEVEL: "${LOG_LEVEL}"
      TOPIC: "object_storage_notification"
      MQTT_BROKER: "mqtt-broker:1883"
      MQTT_USER: "${MQTT_USER}"
      MQTT_PASSWORD: "${MQTT_PASSWORD}"
      MINIO_SECURE: "${MINIO_SECURE}"
      MINIO_URL: "${MINIO_HOST}"
      MINIO_ACCESS_KEY: "${MINIO_ROOT_USER}"
      MINIO_SECURE_KEY: "${MINIO_ROOT_PASSWORD}"
      S3MAP_DB_URL: "postgresql://\
        ${S3MAP_POSTGRES_USER}:\
        ${S3MAP_POSTGRES_PASS}@\
        ${S3MAP_POSTGRES_HOST}/\
        ${S3MAP_POSTGRES_DB}"
      SCHEDULER: "${SCHEDULER}"
      SCHED_HOST: "${SCHED_HOST}"
      SCHED_MQTT_BROKER: "${SCHED_MQTT_BROKER}"
      SCHED_MQTT_USER: "${SCHED_MQTT_USER}"
      SCHED_MQTT_PASSWORD: "${SCHED_MQTT_PASSWORD}"
      SCHED_JOB_LOG_LEVEL: "${SCHED_JOB_LOG_LEVEL}"
      SCHED_SLURM_RESTAPI_VERSION: "${SCHED_SLURM_RESTAPI_VERSION}"
      SCHED_SLURM_USER: "${SCHED_SLURM_USER}"
      SCHED_SLURM_JWT_TOKEN: "${SCHED_SLURM_JWT_TOKEN}"
    command:
      - "schedule-parser-job"


  worker-run-qaqc:
    image: "registry.hzdr.de/ufz-tsm/tsm-dispatcher/dispatcher:${DISPATCHER_IMAGE_TAG}"
    restart: "on-failure"
    depends_on:
      mqtt-broker:
        condition: "service_healthy"
      basic-demo-scheduler:
        condition: "service_healthy"
    environment:
      LOG_LEVEL: "${LOG_LEVEL}"
      TOPIC: "data_parsed"
      MQTT_BROKER: "mqtt-broker:1883"
      MQTT_USER: "${MQTT_USER}"
      MQTT_PASSWORD: "${MQTT_PASSWORD}"
      SCHEDULER: "${SCHEDULER}"
      SCHED_HOST: "${SCHED_HOST}"
      SCHED_MQTT_BROKER: "${SCHED_MQTT_BROKER}"
      SCHED_MQTT_USER: "${SCHED_MQTT_USER}"
      SCHED_MQTT_PASSWORD: "${SCHED_MQTT_PASSWORD}"
      SCHED_JOB_LOG_LEVEL: "${SCHED_JOB_LOG_LEVEL}"
      SCHED_SLURM_RESTAPI_VERSION: "${SCHED_SLURM_RESTAPI_VERSION}"
      SCHED_SLURM_USER: "${SCHED_SLURM_USER}"
      SCHED_SLURM_JWT_TOKEN: "${SCHED_SLURM_JWT_TOKEN}"
    command:
      - "schedule-qaqc-job"


  worker-mqtt-ingest:
    image: "registry.hzdr.de/ufz-tsm/tsm-dispatcher/dispatcher:${DISPATCHER_IMAGE_TAG}"
    restart: on-failure
    depends_on:
      mqtt-broker:
        condition: "service_healthy"
      database:
        condition: "service_healthy"
    environment:
      LOG_LEVEL: "${LOG_LEVEL}"
      TOPIC: "mqtt_ingest/#"
      MQTT_BROKER: "mqtt-broker:1883"
      MQTT_USER: "${MQTT_INGEST_USER}"
      MQTT_PASSWORD: "${MQTT_INGEST_PASSWORD}"
    command:
      - parse-mqtt-data
      - --target-uri
      - "postgresql://\
        ${CREATEDB_POSTGRES_USER}:\
        ${CREATEDB_POSTGRES_PASSWORD}@\
        ${CREATEDB_POSTGRES_HOST}/\
        ${CREATEDB_POSTGRES_DATABASE}"


  # =================================================================
  # other worker
  # =================================================================

  worker-grafana-user-orgs:
    image: "registry.hzdr.de/ufz-tsm/tsm-dispatcher/dispatcher:${DISPATCHER_IMAGE_TAG}"
    restart: "${RESTART}"
    depends_on:
      mqtt-broker:
        condition: "service_healthy"
      visualization:
        condition: "service_started"
    environment:
      LOG_LEVEL: "${LOG_LEVEL}"
      TOPIC: "user_login"
      MQTT_BROKER: "mqtt-broker:1883"
      MQTT_USER: "${MQTT_USER}"
      MQTT_PASSWORD: "${MQTT_PASSWORD}"
      GRAFANA_URL: "${GRAFANA_URL}"
      GRAFANA_USER: "${GRAFANA_USER}"
      GRAFANA_PASSWORD: "${GRAFANA_PASSWORD}"
      ALLOWED_VOS: "${ALLOWED_VOS}"
    command:
      - "create-grafana-user"


  basic-demo-scheduler:
    image: "registry.hzdr.de/ufz-tsm/tsm-basic-demo-scheduler/basic_demo_scheduler:${SCHEDULER_IMAGE_TAG}"
    restart: "${RESTART}"
    # prevent blocking/slowing-down of other services
    # if many scheduler jobs occur at the same time
    cpu_count: ${SCHEDULER_CPU_COUNT}
    healthcheck:
      test: [ "CMD-SHELL", "curl --fail http://localhost:5000/health || exit 1" ]
      interval: 10s
      timeout: 2s
      retries: 5
    environment:
      MQTT_BROKER: "mqtt-broker:1883"
      MQTT_USER: "${MQTT_USER}"
      MQTT_PASSWORD: "${MQTT_PASSWORD}"
    command:
      - "--verbose"


  cron-scheduler:
    build:
        context: "cron"
        args:
            UID: "${UID:-1000}"
            DEBIAN_IMAGE_TAG: "${CRON_DEBIAN_IMAGE_TAG}"
    restart: "${RESTART:-on-failure}"
    environment:
      SETUP_SERVICE: "${CRON_SETUP_SERVICE}"
      CREATEDB_POSTGRES_USER: "${CRON_CREATEDB_POSTGRES_USER}"
      CREATEDB_POSTGRES_PASSWORD: "${CRON_CREATEDB_POSTGRES_PASSWORD}"
      CREATEDB_POSTGRES_HOST: "${CRON_CREATEDB_POSTGRES_HOST}"
      CREATEDB_POSTGRES_DATABASE: "${CRON_CREATEDB_POSTGRES_DATABASE}"
      SMS_ACCESS_TYPE: "${CRON_SMS_ACCESS_TYPE}"
      SMS_API_URL: "${CRON_SMS_API_URL}"
      SMS_API_TOKEN: "${CRON_SMS_API_TOKEN}"
      CV_ACCESS_TYPE: "${CRON_CV_ACCESS_TYPE}"
      CV_API_URL: "${CRON_CV_API_URL}"
    healthcheck:
      test: ["CMD-SHELL", "service cron status || exit 1"]
      interval: 5s
      timeout: 3s
      retries: 5
    volumes:
      - "./cron/crontab.txt:/tmp/crontab.txt:ro"
      - "./cron/scripts:/home/tsm/scripts:ro"