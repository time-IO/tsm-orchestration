---
version: "2.4"
services:
  database:
    restart: "${RESTART:-on-failure}"
    # image: timescale/timescaledb:latest-pg14
    build:
      context: "data/postgres"
      args:
        UID: "${UID}"
    ports:
      - "${POSTGRES_PORT:-127.0.0.1:5432}:5432"
    environment:
      POSTGRES_USER: "${POSTGRES_USER:\
                     ?Please define an postgres user!}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD:\
                         ?Please define an postgres password!}"
      PGDATA: "/var/lib/postgresql/data/pgdata"
      MQTT_AUTH_POSTGRES_USER: "${MQTT_AUTH_POSTGRES_USER:?\
                               Please define a mqtt auth database user!}"
      MQTT_AUTH_POSTGRES_PASS: "${MQTT_AUTH_POSTGRES_PASS:?\
                               Please define a mqtt auth database password!}"
      FRONTEND_POSTGRES_USER: "${FRONTEND_POSTGRES_USER:?\
                               Please define a frontend database user!}"
      FRONTEND_POSTGRES_PASS: "${FRONTEND_POSTGRES_PASS:?\
                               Please define a frontend database password!}"
    volumes:
      - "./mosquitto/mosquitto-go-auth.sh:/docker-entrypoint-initdb.d/mosquitto-go-auth.sh:ro"
      - "./frontend/frontend-database.sh:/docker-entrypoint-initdb.d/frontend-database.sh:ro"
      - "./data/postgres/data:/var/lib/postgresql/data"
      - "./data/postgres/postgres-force-ssl.sh:\
      /docker-entrypoint-initdb.d/postgres-force-ssl.sh"
      - "${POSTGRES_TLS_CERT_PATH:-/tmp/c8cf2d92-\
      73cd-11ec-b035-54e1ad7c5c19}:/var/lib/postgresql/server.crt"
      - "${POSTGRES_TLS_KEY_PATH:-/tmp/c8cf2d92-\
      73cd-11ec-b035-54e1ad7c5c19}:/var/lib/postgresql/server.key"
    user: "${UID}:${GID}"
    command: "${POSTGRES_EXTRA_PARAMS:-}"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $POSTGRES_USER"]
      interval: "${POSTGRES_HEALTHCHECK_INTERVAL:-10s}"
      timeout: 5s
      retries: 5

  object-storage:
    image: "minio/minio"
    restart: "${RESTART:-on-failure}"
    depends_on:
      - "mqtt-broker"
    environment:
      MINIO_ROOT_USER: "${MINIO_ROOT_USER:?Please define an minio root user!}"
      MINIO_ROOT_PASSWORD: "${MINIO_ROOT_PASSWORD:?\
      Please define an minio root user password!}"
      MINIO_BROWSER_REDIRECT_URL: "${MINIO_BROWSER_REDIRECT_URL}"
      MINIO_NOTIFY_MQTT_ENABLE_LOCAL_BROKER: "on"
      MINIO_NOTIFY_MQTT_BROKER_LOCAL_BROKER: "tcp://mqtt-broker:1883"
      MINIO_NOTIFY_MQTT_TOPIC_LOCAL_BROKER: "object_storage_notification"
      MINIO_NOTIFY_MQTT_USERNAME_LOCAL_BROKER: "${MQTT_USER:\
      ?Please define a mqtt user!}"
      MINIO_NOTIFY_MQTT_PASSWORD_LOCAL_BROKER: "${MQTT_PASSWORD:\
      ?Please define a mqtt password!}"
      MINIO_NOTIFY_MQTT_KEEP_ALIVE_INTERVAL_LOCAL_BROKER: "60s"
      #      MINIO_NOTIFY_MQTT_QOS_LOCAL_BROKER: "<string>"
      MINIO_NOTIFY_MQTT_RECONNECT_INTERVAL_LOCAL_BROKER: "60s"
      #      MINIO_NOTIFY_MQTT_QUEUE_DIR_LOCAL_BROKER: "<string>"
      #      MINIO_NOTIFY_MQTT_QUEUE_LIMIT_LOCAL_BROKER: "<string>"
      #      MINIO_NOTIFY_MQTT_COMMENT_LOCAL_BROKER: "<string>"
      MINIO_SERVER_URL: "${MINIO_SERVER_URL:-}"
    volumes:
      - "./data/minio/vol0:/vol0"
      - "./data/minio/vol1:/vol1"
      - "./data/minio/vol2:/vol2"
      - "./data/minio/vol3:/vol3"
      - "${MINIO_TLS_CERT_PATH:-/tmp/c8cf2d92\
      -73cd-11ec-b035-54e1ad7c5c19}:/.minio/certs/public.crt:ro"
      - "${MINIO_TLS_KEY_PATH:-/tmp/c8cf2d92\
      -73cd-11ec-b035-54e1ad7c5c19}:/.minio/certs/private.key:ro"
    user: "${UID}:${GID}"
    command:
      - "server"
      - "/vol{0...3}"
      - "--console-address"
      - ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "${MINIO_SERVER_URL\
      :-http://localhost:9000}/minio/health/live"]
      interval: "${MINIO_HEALTHCHECK_INTERVAL:-2s}"
      timeout: 5s
      retries: 15

  worker-object-storage-setup:
    image: "git.ufz.de:4567/rdm-software/\
    timeseries-management/tsm-dispatcher/dispatcher:latest"
    restart: "${RESTART:-on-failure}"
    depends_on:
      mqtt-broker:
        condition: "service_started"
      object-storage:
        condition: "service_healthy"
    command:
      - "--log-level"
      - "${LOG_LEVEL:-INFO}"
      - "--topic"
      - "thing_creation"
      - "--mqtt-broker"
      - "mqtt-broker:1883"
      - "--mqtt-user"
      - "${MQTT_USER:?Please define a mqtt user!}"
      - "--mqtt-password"
      - "${MQTT_PASSWORD:?Please define a mqtt password!}"
      - "run-create-thing-on-minio-action-service"
      - "--minio_secure"
      - "${MINIO_SECURE:-False}"
      - "${MINIO_HOST:-object-storage:9000}"
      - "${MINIO_ROOT_USER:?Please define an minio root user!}"
      - "${MINIO_ROOT_PASSWORD:?\
      Please define an minio root user password!}"

  worker-db-setup:
    image: "git.ufz.de:4567/rdm-software/\
    timeseries-management/tsm-dispatcher/dispatcher:latest"
    restart: "${RESTART:-on-failure}"
    depends_on:
      - "mqtt-broker"
      - "database"
    command:
      - "--log-level"
      - "${LOG_LEVEL:-INFO}"
      - "--topic"
      - "thing_creation"
      - "--mqtt-broker"
      - "mqtt-broker:1883"
      - "--mqtt-user"
      - "${MQTT_USER:?Please define a mqtt user!}"
      - "--mqtt-password"
      - "${MQTT_PASSWORD:?Please define a mqtt password!}"
      - "run-create-database-schema-action-service"
      - "postgresql://${CREATEDB_POSTGRES_USER:\
      ?Please define an postgres user!}:${CREATEDB_POSTGRES_PASSWORD:\
      ?Please define an postgres password!}@${CREATEDB_POSTGRES_HOST:\
      -database}/${CREATEDB_POSTGRES_DATABASE:-postgres}"

  worker-file-ingest:
    image: "git.ufz.de:4567/rdm-software/\
    timeseries-management/tsm-dispatcher/dispatcher:latest"
    restart: "on-failure"
    depends_on:
      mqtt-broker:
        condition: "service_started"
      object-storage:
        condition: "service_healthy"
    command:
      - "--log-level"
      - "${LOG_LEVEL:-INFO}"
      - "--topic"
      - "object_storage_notification"
      - "--mqtt-broker"
      - "mqtt-broker:1883"
      - "--mqtt-user"
      - "${MQTT_USER:?Please define a mqtt user!}"
      - "--mqtt-password"
      - "${MQTT_PASSWORD:?Please define a mqtt password!}"
      - "run-process-new-file-service"
      - "--minio_secure"
      - "${MINIO_SECURE:-False}"
      - "${MINIO_HOST:-minio:9000}"
      - "${MINIO_ROOT_USER:?Please define an minio root user!}"
      - "${MINIO_ROOT_PASSWORD:?Please define an minio root user password!}"
      - "http://basic-demo-scheduler:5000/extractor/run"


  worker-run-qaqc:
    image: "git.ufz.de:4567/rdm-software/\
    timeseries-management/tsm-dispatcher/dispatcher:latest"
    restart: "on-failure"
    depends_on:
      mqtt-broker:
        condition: "service_started"
      object-storage:
        condition: "service_healthy"
    command:
      - "--log-level"
      - "${LOG_LEVEL:-INFO}"
      - "--topic"
      - "data_parsed"
      - "--mqtt-broker"
      - "mqtt-broker:1883"
      - "--mqtt-user"
      - "${MQTT_USER:?Please define a mqtt user!}"
      - "--mqtt-password"
      - "${MQTT_PASSWORD:?Please define a mqtt password!}"
      - "run-qaqc"
      - "http://basic-demo-scheduler:5000/qaqc/run"

  worker-mqtt-ingest:
    image: "git.ufz.de:4567/rdm-software/\
        timeseries-management/tsm-dispatcher/dispatcher:latest"
    restart: on-failure
    depends_on:
      - mqtt-broker
      - database
    command:
      - --log-level
      - ${LOG_LEVEL:-INFO}
      - --topic
      - mqtt_ingest/#
      - --mqtt-broker
      - mqtt-broker:1883
      - --mqtt-user
      - ${MQTT_INGEST_USER:?Please define a mqtt user!}
      - --mqtt-password
      - ${MQTT_INGEST_PASSWORD:?Please define a mqtt password!}
      - parse-data
      - --target-uri
      - "postgresql://${CREATEDB_POSTGRES_USER:\
        ?Please define an postgres user!}:${CREATEDB_POSTGRES_PASSWORD:\
        ?Please define an postgres password!}@${CREATEDB_POSTGRES_HOST:\
        -database}/${CREATEDB_POSTGRES_DATABASE:-postgres}"

  worker-mqtt-user-creation:
    image: "git.ufz.de:4567/rdm-software/\
        timeseries-management/tsm-dispatcher/dispatcher:latest"
    restart: on-failure
    depends_on:
      - mqtt-broker
      - database
    command:
      - --log-level
      - ${LOG_LEVEL:-INFO}
      - --topic
      - thing_creation
      - --mqtt-broker
      - mqtt-broker:1883
      - --mqtt-user
      - ${MQTT_USER:?Please define a mqtt user!}
      - --mqtt-password
      - ${MQTT_PASSWORD:?Please define a mqtt password!}
      - run-create-mqtt-user-action-service
      - "postgresql://${CREATEDB_POSTGRES_USER:\
        ?Please define an postgres user!}:${CREATEDB_POSTGRES_PASSWORD:\
        ?Please define an postgres password!}@${CREATEDB_POSTGRES_HOST:\
        -database}/${CREATEDB_POSTGRES_DATABASE:-postgres}"


  basic-demo-scheduler:
    image: "git.ufz.de:4567/rdm-software/timeseries-management/\
    tsm-basic-demo-scheduler/basic_demo_scheduler:latest"
    restart: "${RESTART:-on-failure}"
    command:
      - "--mqtt-broker"
      - "mqtt-broker:1883"
      - "--mqtt-user"
      - "${MQTT_USER:?Please define a mqtt user!}"
      - "--mqtt-password"
      - "${MQTT_PASSWORD:?Please define a mqtt password!}"
      - "--verbose"

  mqtt-broker:
    restart: "${RESTART:-on-failure}"
    image: "iegomez/mosquitto-go-auth:latest"
    depends_on:
      - "database"
    command:
      - "/usr/sbin/mosquitto"
      - "-c"
      - "/var/lib/mosquitto/mosquitto.conf"
    entrypoint:
      - "/docker-entrypoint.sh"
    user: "${UID}:${GID}"
    environment:
      MQTT_USER: "${MQTT_USER:?Please define a mqtt user!}"
      MQTT_PASSWORD: "${MQTT_PASSWORD:?Please define a mqtt password!}"
      MQTT_INGEST_USER: "${MQTT_INGEST_USER:?Please define a mqtt user!}"
      MQTT_INGEST_PASSWORD: "${MQTT_INGEST_PASSWORD:?\
                            Please define a mqtt password!}"
      MQTT_AUTH_POSTGRES_HOST: "${MQTT_AUTH_POSTGRES_HOST:?\
                               Please define a mqtt auth database host!}"
      MQTT_AUTH_POSTGRES_PORT: "${MQTT_AUTH_POSTGRES_PORT:?\
                               Please define a mqtt auth database portt!}"
      MQTT_AUTH_POSTGRES_USER: "${MQTT_AUTH_POSTGRES_USER:?\
                               Please define a mqtt auth database user!}"
      MQTT_AUTH_POSTGRES_PASS: "${MQTT_AUTH_POSTGRES_PASS:?\
                               Please define a mqtt auth database password!}"
      MQTT_AUTH_POSTGRES_DB: "${MQTT_AUTH_POSTGRES_DB\
                               :?Please define a mqtt auth database name!}"
      MQTT_AUTH_PG_TLSMODE: "${MQTT_AUTH_PG_TLSMODE\
                              :?Please define a mqtt auth database connection\
                               tls mode!}"
      FRONTEND_MQTT_USER: "${FRONTEND_MQTT_USER\
                            :?Please define a frontend mqtt user!}"
      FRONTEND_MQTT_PASS: "${FRONTEND_MQTT_PASS\
                            :?Please define a frontend mqtt password!}"
    ports:
      - "${MOSQUITTO_PORT:-127.0.0.1:1883}:1883"
      - "${MOSQUITTO_PORT_SECURE:-127.0.0.1:8883}:8883"
    volumes:
      - "${MOSQUITTO_CONFIG:-./mosquitto/mosquitto.dev.conf}\
      :/etc/mosquitto/config/mosquitto.conf:ro"
      - "./data/mosquitto/auth:/mosquitto-auth/"
      - "${MOSQUITTO_TLS_CERT_PATH:-/tmp/c8cf2d92\
      -73cd-11ec-b035-54e1ad7c5c19}:\
      /mosquitto/config/certs/server.crt:ro"
      - "${MOSQUITTO_TLS_KEY_PATH:-/tmp/c8cf2d92\
      -73cd-11ec-b035-54e1ad7c5c19}:\
      /mosquitto/config/certs/server.key:ro"
      - "${MOSQUITTO_TLS_CA_PATH:-/tmp/c8cf2d92\
      -73cd-11ec-b035-54e1ad7c5c19}:/mosquitto/config/certs/ca.crt:ro"
      - "./mosquitto/docker-entrypoint.sh:/docker-entrypoint.sh"
    tmpfs:
      - "/var/lib/mosquitto/:uid=${UID}"
    healthcheck:
      test: ["CMD-SHELL", "mosquitto_sub -t \
      '$$SYS/broker/version' -C 1 -u $${MQTT_USER} \
      -P $${MQTT_PASSWORD} --id docker-compose-healthcheck"]
      interval: "${MQTT_BROKER_HEALTHCHECK_INTERVAL:-10s}"
      timeout: 10s
      retries: 6
    logging:
      options:
        max-size: "${MQTT_BROKER_LOG_SIZE:-100K}"
        max-file: "${MQTT_BROKER_FILE_COUNT:-10}"

  mqtt-cat:
    restart: "${RESTART:-on-failure}"
    image: "eclipse-mosquitto:latest"
    logging:
      options:
        max-size: "${MQTT_CAT_LOG_SIZE:-100K}"
        max-file: "${MQTT_CAT_FILE_COUNT:-10}"
    command:
      - "mosquitto_sub"
      - "-h"
      - "mqtt-broker"
      - "--pretty"
      - "-u"
      - "${MQTT_USER:?Please define a mqtt user!}"
      - "-P"
      - "${MQTT_PASSWORD:?Please define a mqtt password!}"
      - "-t"
      - "#"
      - "-v"

  visualization:
    restart: "${RESTART:-on-failure}"
    image: "grafana/grafana:latest"
    user: "${UID}:${GID}"
    environment:
      - "GF_SECURITY_ADMIN_USER=\
      ${GRAFANA_USER:?Please define a grafana user}"
      - "GF_SECURITY_ADMIN_PASSWORD=\
      ${GRAFANA_PASSWORD:?Please define a grafana password}"
      - "GRAFANA_DEFAULT_DATASOURCE_URL=\
      ${GRAFANA_DEFAULT_DATASOURCE_URL:-database:5432}"
      - "GRAFANA_DEFAULT_DATASOURCE_DATABASE=\
      ${GRAFANA_DEFAULT_DATASOURCE_DATABASE:-postgres}"
      - "GRAFANA_DEFAULT_DATASOURCE_USER=\
      ${GRAFANA_DEFAULT_DATASOURCE_USER:-postgres}"
      - "GRAFANA_DEFAULT_DATASOURCE_PASSWORD=\
      ${GRAFANA_DEFAULT_DATASOURCE_PASSWORD:-postgres}"
      - "GRAFANA_DEFAULT_DATASOURCE_SSLMODE=\
      ${GRAFANA_DEFAULT_DATASOURCE_SSLMODE:-disable}"
      - "GF_SERVER_ROOT_URL=%(protocol)s://%(domain)s:%(http_port)s/visualization/"
      - "GF_SERVER_SERVE_FROM_SUB_PATH=True"
    volumes:
      - "./grafana/provisioning:/etc/grafana/provisioning/"
      - "./data/grafana/:/var/lib/grafana"

  frontend:
    image: "git.ufz.de:4567/rdm-software/timeseries-management/tsm-frontend\
            /tsm-frontend:latest"
    restart: "${RESTART:-on-failure}"
    command: >
      bash -c "python3 manage.py migrate
      && python3 manage.py loaddata admin_interface_theme_foundation.json
      && python3 manage.py loaddata ufz_theme.json
      && python3 manage.py createsuperuser --noinput
      || echo 'Speruser already created'
      && python3 manage.py collectstatic --noinput
      && gunicorn main.wsgi:application --bind 0.0.0.0:8000 -w 6"
    user: "appuser"
    volumes:
      - "frontend-statics:/home/appuser/app/static"
    entrypoint: ""
    # ports:
    #   - "127.0.0.1:8000:8000"
    environment:
      - "POSTGRES_HOST=${FRONTEND_POSTGRES_HOST}"
      - "POSTGRES_NAME=${FRONTEND_POSTGRES_DB:-postgres}"
      - "POSTGRES_USER=${FRONTEND_POSTGRES_USER}"
      - "POSTGRES_PASSWORD=${FRONTEND_POSTGRES_PASS}"
      - "PUBLISH_THING_TO_BROKER=True"
      - "TSM_DATABASE_HOST="
      - "TSM_DATABASE_NAME="
      - "MQTT_BROKER_HOST=${FRONTEND_MQTT_HOST}"
      - "MQTT_USER=${FRONTEND_MQTT_USER}"
      - "MQTT_PASSWORD=${FRONTEND_MQTT_PASS}"
      - "DJANGO_SUPERUSER_USERNAME=${DJANGO_SUPERUSER_USERNAME}"
      - "DJANGO_SUPERUSER_PASSWORD=${DJANGO_SUPERUSER_PASSWORD}"
      - "DJANGO_SUPERUSER_EMAIL=${DJANGO_SUPERUSER_EMAIL:-example@example.com}"
      - "DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY:?Please define a unique and\
        secure Django secret key!}"
      - "DJANGO_DEBUG=${DJANGO_DEBUG:-0}"
      - "DJANGO_TRUSTED_ORIGINS=${DJANGO_TRUSTED_ORIGINS:-http://localhost:80}"
      - "DJANGO_BASE_PATH=${DJANGO_BASE_PATH:-/frontend/}"
      - "DJANGO_ALLOWED_HOSTS=${DJANGO_ALLOWED_HOSTS:-}"
      - "POSTGRES_SSLMODE=${DJANGO_POSTGRES_SSLMODE:-verify-full}"
    depends_on:
      database:
        condition: service_healthy
      mqtt-broker:
        condition: service_started

  tsmdl:
    image: "git.ufz.de:4567/rdm-software/timeseries-management/tsm-ufz-tsmdl/\
    tsm-ufz-tsmdl:latest"
    restart: "${RESTART:-on-failure}"
    entrypoint: "/app/start.sh"
    environment:
      DB_URL: "postgresql://${CREATEDB_POSTGRES_USER:\
        ?Please define an postgres user!}:${CREATEDB_POSTGRES_PASSWORD:\
        ?Please define an postgres password!}@${CREATEDB_POSTGRES_HOST:\
        -database}/${CREATEDB_POSTGRES_DATABASE:-postgres}"
      WEB_CONCURRENCY: 10
      UVICORN_ARGS: "${UVICORN_ARGS:-} --root-path /tsmdl"
    depends_on:
      database:
        condition: service_healthy

  proxy:
    image: nginx
    restart: "${RESTART:-on-failure}"
    ports:
      - "${PROXY_PLAIN_PORT:-127.0.0.1:80:80}"
      - "${PROXY_TLS_PORT:-127.0.0.1:443:443}"
      - "${PROXY_MINIO_PORT:-127.0.0.1:9000:9000}"
    volumes:
      - "frontend-statics:/home/appuser/app/static"
      - "./nginx/${PROXY_SITE_CONFIG_FILE:-tsm.dev.conf}:/etc/nginx/conf.d/default.conf:ro"
      - "${PROXY_TLS_CERT_PATH:-/tmp/c8cf2d92\
      -73cd-11ec-b035-54e1ad7c5c19}:/etc/ssl/public.crt:ro"
      - "${PROXY_TLS_KEY_PATH:-/tmp/c8cf2d92\
      -73cd-11ec-b035-54e1ad7c5c19}:/etc/ssl/private.key:ro"
    depends_on:
      - "frontend"
      - "visualization"
      - "object-storage"
      - "tsmdl"

volumes:
  frontend-statics:
