# different listeners use different authentication methods
per_listener_settings false
# disable anonymous authentication to the broker.
allow_anonymous false

listener 1883
# password_file /mosquitto-auth/mosquitto.passwd
# acl_file  /mosquitto-auth/mosquitto.acl
log_type all

auth_plugin /mosquitto/go-auth.so

auth_opt_backends files, postgres
auth_opt_files_register user, acl
auth_opt_files_password_path /mosquitto-auth/mosquitto.passwd
auth_opt_files_acl_path /mosquitto-auth/mosquitto.acl
# auth_opt_hasher_algorithm sha256       # hashing algorithm, either sha512 (default) or sha256
# auth_opt_hasher_salt_encoding          # salt encoding, either base64 (default) or utf-8
# auth_opt_
auth_opt_pg_register user
auth_opt_pg_host $MQTT_AUTH_POSTGRES_HOST
auth_opt_pg_port $MQTT_AUTH_POSTGRES_PORT
auth_opt_pg_user $MQTT_AUTH_POSTGRES_USER
auth_opt_pg_password $MQTT_AUTH_POSTGRES_PASS
auth_opt_pg_dbname $MQTT_AUTH_POSTGRES_DB
auth_opt_pg_sslmode $MQTT_AUTH_PG_TLSMODE
auth_opt_pg_userquery select password from "mqtt_user" where username = \$1
auth_opt_log_level debug

# ────────────────────────────────────────────────────────────
# Rate-limiting and memory management settings for Mosquitto
# Target scenario:
# - ~15 clients total
# - Most clients see sporadic messages
# - 2–3 clients (ingest, qc) may receive large bursts of QoS 1/2 messages (10,000–50,000) during initial imports
# - Messages from MinIO are ~1.5 KB (system messaged considerably smaller), processed within seconds (ingest) to minutes (qc) per message
# ────────────────────────────────────────────────────────────

# Maximum allowed size of a single MQTT message payload.
message_size_limit 2000000          # 2 MB

# Maximum MQTT packet size (header + payload). Anything above causes disconnect.
# This is a safety guard — MQTT protocol allows up to ~256 MB.
max_packet_size 4000000             # 4 MB

# ────────────── Inflight QoS 1/2 Control ──────────────
# "Inflight" = messages sent to client but not yet acknowledged (PUBACK/PUBREC).
# - These count toward QoS 1/2 delivery guarantees.
# - Once inflight is full, further messages are queued (see below).
# - Important to balance throughput vs client capacity.

# Limits total inflight data per client (to prevent large memory spikes).
max_inflight_bytes 1000000          # 1 MB across all unacknowledged messages per client

# Limits number of unacknowledged QoS 1/2 messages per client.
# If your client is slow or serial (1–2 messages per second), a lower value is ideal.
# Higher values are useful only if the client can process concurrently.
max_inflight_messages 100           # Conservative value for slow/serial clients

# ────────────── Queuing (Backlog) ──────────────
# Messages beyond the inflight limit are queued per client.
# This allows the broker to absorb temporary spikes in message volume.
# If the queue fills, new messages are silently dropped (MQTT spec).

# Maximum number of queued QoS 1/2 messages per client
max_queued_messages 100000          # Up to 100,000 messages per client in queue

# Maximum total memory of queued messages per client
max_queued_bytes 200000000          # 200 MB of queued data per client

# ────────────── Broker Memory Limits ──────────────
# Hard upper memory limit for the broker process
memory_limit 8589934592             # 8 GB total (across all clients/messages)

# ────────────── Keepalive / Persistence ──────────────
# Overrides client-provided keepalive. 0 = unlimited (use client value)
max_keepalive 0

# Enable persistence (retains client sessions, messages for durable QoS 1/2 delivery)
persistence true
autosave_interval 10                # Persist state every 10 seconds
#autosave_on_changes                # Uncomment to persist only when changes occur

persistence_file mosquitto.db
persistence_location /mosquitto-data/

# How long to keep data for disconnected clients with persistent sessions
persistent_client_expiration 14d    # 14 days

# ────────────────────────────────────────────────────────────

#use this to enable tls config
include_dir /var/lib/mosquitto/tls/
