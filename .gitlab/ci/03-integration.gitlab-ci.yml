---
docker-service-test:
  image: "docker:${DOCKER_IMAGE_TAG}"
  stage: "integration"
  needs:
    - "build-and-push-images"
  before_script:
    # As job has `needs` dependency to the build job, we can use the .env defined there
    - "apk add --no-cache bash"
    - "docker compose up -d --quiet-pull"
    - "docker compose logs init"
    - "sleep 20"
  script:
    - "docker compose logs keycloak"
    - "docker ps"
    - "docker compose logs flyway"
    - "cd .gitlab/ci"
    - "./dockertest.sh"
  rules:
    # Run if pipeline is triggered by a tag and build job was successful
    - if: "$CI_COMMIT_TAG && $CI_COMMIT_REF_PROTECTED"
      when: on_success
    # Never run if pipeline is triggered by a merge_request_event or a push on main
    - if: "$CI_PIPELINE_SOURCE == 'merge_request_event' || $CI_COMMIT_BRANCH == 'main'"
      when: never
    # Run if pipeline is triggered by a push on a branch and build job was successful
    - if: "$CI_PIPELINE_SOURCE == 'push'"
      when: on_success
  tags:
    - "dind"

mqtt-service-test:
  image: "docker:${DOCKER_IMAGE_TAG}"
  stage: "integration"
  needs:
    - "build-and-push-images"
  before_script:
    # As job has `needs` dependency to the build job, we can use the .env defined there
    - "apk add --no-cache python3"
    - "python3 -m venv venv"
    - "source venv/bin/activate"
    - "python3 -m ensurepip"
    - "python3 -m pip install --upgrade pip"
    - "export PAHO_MQTT=$(grep 'paho-mqtt' src/requirements.txt)"
    - "python3 -m pip install $PAHO_MQTT"
    - "docker compose up -d --quiet-pull"
    - "sleep 20"
  script:
    - ".gitlab/ci/py/mqtt-service-test.py || exit 1"
    - "docker compose logs mqtt-cat"
  rules:
    # Run if pipeline is triggered by a tag and build job was successful
    - if: "$CI_COMMIT_TAG && $CI_COMMIT_REF_PROTECTED"
      when: on_success
    # Never run if pipeline is triggered by a merge_request_event or a push on main
    - if: "$CI_PIPELINE_SOURCE == 'merge_request_event' || $CI_COMMIT_BRANCH == 'main'"
      when: never
    # Run if pipeline is triggered by a push on a branch and build job was successful
    - if: "$CI_PIPELINE_SOURCE == 'push'"
      when: on_success
  tags:
    - "dind"

combined-integration-test:
  image: "docker:${DOCKER_IMAGE_TAG}"
  stage: "integration"
  needs:
    - "build-and-push-images"
  before_script:
    # As job has `needs` dependency to the build job, we can use the .env defined there
    - "export DJANGO_TRUSTED_ORIGINS='http://docker:80 http://docker'"
    - "apk add --no-cache curl postgresql-client"
    - "docker compose up -d --quiet-pull"
    - "sleep 20"
  script:
    - "echo 'testing object storage integration...'"
    - "curl -u minioadmin:minioadmin ftp://docker:40021 -I -s -o /dev/null || exit 1"
    - "echo 'testing database integration...'"
    - "PGPASSWORD=postgres psql -U postgres -d postgres -h docker -tAc \"SELECT version()\" || exit 1"
    - "echo 'testing proxy integration...'"
    - "curl -Isf http://docker -o /dev/null || exit 1"
    - "curl -Isf http://docker/object-storage/ -o /dev/null || exit 1"
    - "curl -Isf http://docker/visualization/ -o /dev/null || exit 1"
    - "curl -Isf http://docker/sta/ -o /dev/null || exit 1"
    - "curl -Isf http://docker/frontend/ || echo nope"
  rules:
    # Run if pipeline is triggered by a tag and build job was successful
    - if: "$CI_COMMIT_TAG && $CI_COMMIT_REF_PROTECTED"
      when: on_success
    # Never run if pipeline is triggered by a merge_request_event or a push on main
    - if: "$CI_PIPELINE_SOURCE == 'merge_request_event' || $CI_COMMIT_BRANCH == 'main'"
      when: never
    # Run if pipeline is triggered by a push on a branch and build job was successful
    - if: "$CI_PIPELINE_SOURCE == 'push'"
      when: on_success
  tags:
    - "dind"
