---
object-storage-test:
  image: "docker:24.0.6-dind"
  stage: "end-to-end"
  before_script:
    - "apk add --no-cache curl jq iputils"
  script:
    - "echo $SHELL"
    - "cp .env.example .env"
    - "docker compose up -d --force-recreate -V --quiet-pull --build"
    - "sleep 15" 
    - "docker compose exec -T frontend python3 manage.py loaddata user.json"
    - "sleep 2"
    - "docker compose exec -T frontend python3 manage.py loaddata thing.json"
    - "sleep 2"
    - "docker compose exec -T frontend python3 manage.py dumpdata tsm.rawdatastorage > object-storage.json"
    - "export MINIO_USER=$(cat object-storage.json | jq -r '.[].fields.access_key')"
    - "export MINIO_PASSWORD=$(cat object-storage.json | jq -r '.[].fields.secret_key')"
    - "curl -u ${MINIO_USER}:${MINIO_PASSWORD} ftp://127.0.0.1:40021 -I -s -o /dev/null && echo \"yes that worked\"|| echo \"no it didn't\""
  tags:
    - "dind"

database-test:
  image: "docker:24.0.6-dind"
  stage: "end-to-end"
  before_script:
    - "apk add --no-cache postgresql-client jq iputils"
  script:
    - "echo $SHELL"
    - "ls -lah /certs/ca"
    - "ls -lah /certs/client"
    - "ls -lah /certs/server"
    - "cp .env.example .env"
    - "docker compose up -d --force-recreate -V --quiet-pull --build"
    - "sleep 15" 
    - "docker compose exec -T frontend python3 manage.py loaddata user.json"
    - "sleep 2"
    - "docker compose exec -T frontend python3 manage.py loaddata thing.json"
    - "sleep 2"
    - "docker compose exec -T frontend python3 manage.py dumpdata tsm.database > database.json"
    - "export DB_USER=$(cat database.json | jq -r '.[].fields.username')"
    - "export DB_PASSWORD=$(cat database.json | jq -r '.[].fields.password')"
    - "export DB_NAME=$(cat database.json | jq -r '.[].fields.name')"
    - "PGPASSWORD=${DB_PASSWORD} psql -U ${DB_USER} -h 127.0.0.1 -p 5432 -d ${DB_NAME} -tAc \"SELECT * from ${DB_USER}.thing\" && echo \"yes that worked\" || echo \no it didn't\""
  tags:
    - "dind"

