---

build-images:
  stage: build
  image: "docker:${DOCKER_IMAGE_TAG}"
  before_script:
    - mkdir images -p
    - cp .env.example .env
    - echo $(date +%Y-%m-%d-%H%M%S) > .build_date
    - |
      echo "TIMEIO_INIT_IMAGE_TAG=$CI_COMMIT_REF_NAME" >> .env
      echo "TIMEIO_DATABASE_IMAGE_TAG=$CI_COMMIT_REF_NAME" >> .env
      echo "TIMEIO_FROST_IMAGE_TAG=$CI_COMMIT_REF_NAME" >> .env
      echo "TIMEIO_CRON_SCHEDULER_IMAGE_TAG=$CI_COMMIT_REF_NAME" >> .env
      echo "TIMEIO_DISPATCHER_IMAGE_TAG=$CI_COMMIT_REF_NAME" >> .env
      echo "TIMEIO_CONFIGDB_UPDATER_IMAGE_TAG=$CI_COMMIT_REF_NAME" >> .env
    - export REGISTRY=$(grep TIMEIO_IMAGE_REGISTRY .env | cut -d'=' -f2)
  script:
    - docker compose build -q init
    #cron-scheduler frost worker-configdb-updater worker-db-setup
    - docker images -a
    - docker save -o images/init.tar ${REGISTRY}/init:$CI_COMMIT_REF_NAME
    #- docker save -o images/cron-scheduler.tar ${REGISTRY}/cron-scheduler:$CI_COMMIT_REF_NAME
    #- docker save -o images/frost.tar ${REGISTRY}/frost:$CI_COMMIT_REF_NAME
    #- docker save -o images/worker-configdb-updater.tar ${REGISTRY}/worker-configdb-updater:$CI_COMMIT_REF_NAME
    #- docker save -o images/worker-db-setup.tar ${REGISTRY}/worker-db-setup:$CI_COMMIT_REF_NAME
    - ls images/*.tar
  artifacts:
    paths:
      - images
      - .build_date
      - .env
  tags:
    - "dind"

#load-images:
#  dependencies:
#    - build-images
#  stage: load
#  image: "docker:${DOCKER_IMAGE_TAG}"
#  script:
#    - for image in $(ls images/*.tar); do docker load < $image; done
#    - docker images -a
#  tags:
#    - "dind"

delete-artifacts:
  dependencies:
    - load-images
  stage: delete
  image: "docker:${DOCKER_IMAGE_TAG}"
  script:
    - echo "Deleting image.tar artifact using GitLab API..."
    - |
      curl --header "PRIVATE-TOKEN: $CI_JOB_TOKEN" \
           --request DELETE \
           "https://codebase.helmholtz.cloud/api/v4/projects/$CI_PROJECT_ID/jobs/$CI_JOB_ID/artifacts"