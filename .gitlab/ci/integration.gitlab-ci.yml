---
docker-service-test:
  image: "docker:${DOCKER_IMAGE_TAG}"
  stage: "integration"
  before_script:
    - "apk add --no-cache bash"
    - "mv .env.example .env"
    - "cp .env .gitlab/ci/.env"
    - "docker compose up -d --force-recreate -V --quiet-pull"
    - "docker compose logs init"
    - "sleep 20"
  script:
    - "docker ps"
    - "docker compose logs flyway"
    - "cd .gitlab/ci"
    - "chmod +x ./dockertest.sh"
    - "./dockertest.sh"
  tags:
    - "dind"

mqtt-service-test:
  image: "docker:${DOCKER_IMAGE_TAG}"
  stage: "integration"
  before_script:
    - "apk add --no-cache python3"
    - "python3 -m venv venv"
    - "source venv/bin/activate"
    - "python3 -m ensurepip"
    - "python3 -m pip install --upgrade pip"
    - "python3 -m pip install paho-mqtt==1.6.1"
    - "mv .env.example .env"
    - "docker compose up -d --force-recreate -V --quiet-pull"
    - "sleep 20"
  script:
    - "chmod +x .gitlab/ci/py/mqtt-service-test.py"
    - ".gitlab/ci/py/mqtt-service-test.py || exit 1"
    - "docker compose logs mqtt-cat"
  tags:
    - "dind"

proxy-test:
  image: "docker:${DOCKER_IMAGE_TAG}"
  stage: "integration"
  before_script:
    - "export DJANGO_TRUSTED_ORIGINS=http://docker:80"
    - "apk add --no-cache curl"
    - "cp .env.example .env"
    - "docker compose up -d --force-recreate -V --quiet-pull"
    - "sleep 20"
  script:
    - "curl -Isf http://docker -o /dev/null || exit 1"
    - "curl -Isf http://docker/object-storage/ -o /dev/null || exit 1"
    - "curl -Isf http://docker/visualization/ -o /dev/null || exit 1"
    - "curl -Isf http://docker/sta/ -o /dev/null || exit 1"
    # somehow curl -Isf http://docker/frontend returns 400
    # so for now we curl it from inside the proxy container
    - "docker compose exec proxy curl -Isf http://proxy/frontend -o /dev/null || exit 1"
  tags:
    - "dind"

object-storage-test:
  image: "docker:${DOCKER_IMAGE_TAG}"
  stage: "integration"
  before_script:
    - "apk add --no-cache curl"
    - "cp .env.example .env"
    - "docker compose up -d --force-recreate -V --quiet-pull"
    - "sleep 30"
  script:
    - "curl -u minioadmin:minioadmin ftp://docker:40021 -I -s -o /dev/null || exit 1"
  tags:
    - "dind"

database-test:
  image: "docker:${DOCKER_IMAGE_TAG}"
  stage: "integration"
  before_script:    
    - "apk add --no-cache postgresql-client"
    - "cp .env.example .env"
    - "docker compose up -d --force-recreate -V --quiet-pull"
    - "sleep 20"
  script:
    - "PGPASSWORD=postgres psql -U postgres -d postgres -h docker -tAc \"SELECT version()\" || exit 1"
  tags:
    - "dind"

docker-image-scan:
  image: "docker:${DOCKER_IMAGE_TAG}"
  stage: "scan"
  variables:
    TRIVY_DISABLE_VEX_NOTICE: "true"
  before_script:
    # Install Trivy in the pipeline environment
    - "apk add --no-cache curl"
    - "curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin v0.58.2"
    - "cp .env.example .env"
  script:
    - "docker compose pull -q"
    - "docker compose build -q"
    - |
      for image in $(docker images --format '{{.Repository}}:{{.Tag}}'); do
        echo "Scanning $image";
        trivy image $image -q --severity CRITICAL >> critical_cves.out;
        trivy image $image -q --severity CRITICAL --ignore-unfixed >> critical_cves_fixed.out;
        trivy image $image -q --severity HIGH >> hig_cves.out;
        trivy image $image -q --severity HIGH --ignore-unfixed >> high_cves_fixed.out; 
      done
    - "cat trivy.out"
  artifacts:
    paths:
      - "*.out"
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      expire_in: 30 days
      when: always
    - if: $CI_COMMIT_BRANCH != "main"
      expire_in: 2 days
      when: always
  tags:
    - "dind"