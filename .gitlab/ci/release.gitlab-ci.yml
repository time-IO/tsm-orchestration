---

deploy-images-to-registry:
  stage: release
  rules:
    # Rules are evaluated in order until the first match.
    # We only want to push new images if source files changes
    # or if we manually decide to do so.
    - if: "$CI_COMMIT_BRANCH == 'main' && $CI_PIPELINE_SOURCE != 'merge_request_event'"
      changes:
        - .env.example
        - src/**/*
        - dispatcher/**/*
        - configdb_updater/**/*
        - init/**/*
        - tomcat/**/*
    - if: "$CI_COMMIT_BRANCH == 'main' && $CI_PIPELINE_SOURCE != 'merge_request_event'"
      when: manual
  image: "docker:${DOCKER_IMAGE_TAG}"
  needs: []
  before_script:
    - cp .env.example .env
    - export BRANCH_NAME=$(git log --merges -1 --pretty=format:'%s' | sed "s/Merge branch '\(.*\)' into 'main'/\1/")
    - |
      echo "TIMEIO_INIT_IMAGE_TAG=$BRANCH_NAME" >> .env
      echo "TIMEIO_FROST_IMAGE_TAG=$BRANCH_NAME" >> .env
      echo "TIMEIO_CRON_SCHEDULER_IMAGE_TAG=$BRANCH_NAME" >> .env
      echo "TIMEIO_DISPATCHER_IMAGE_TAG=$BRANCH_NAME" >> .env
      echo "TIMEIO_CONFIGDB_UPDATER_IMAGE_TAG=$BRANCH_NAME" >> .env
    - export BUILD_DATE=$(echo -n $(date -u +%Y-%m-%d-%H%M%S))
    - echo "$CI_REGISTRY_PASSWORD" | docker login $CI_REGISTRY -u $CI_REGISTRY_USER --password-stdin
    - export REGISTRY=$(grep TIMEIO_IMAGE_REGISTRY .env | cut -d'=' -f2)
    - echo "pulling images from branch $BRANCH_NAME"
  after_script:
    - docker logout
  script:
    - docker compose pull -q init frost cron-scheduler worker-configdb-updater worker-db-setup
    - |
      for image in $(docker images --format '{{ .Repository }}'); do 
        docker tag $image:$BRANCH_NAME $image:latest;
        docker tag $image:$BRANCH_NAME $image:$BUILD_DATE;
        docker push $image:latest;
        docker push $image:$BUILD_DATE;
      done
  tags:
    - "dind"


deploy-prod-images-to-registry:
  stage: release
  rules:
    # Rules are evaluated in order until the first match.
    # We only want to push new images if source files changes
    # or if we manually decide to do so.
    - if: "$CI_COMMIT_TAG && $CI_COMMIT_BRANCH=='main' && $CI_PIPELINE_SOURCE!='merge_request_event'"
      when: manual
    - when: manual
  image: "docker:${DOCKER_IMAGE_TAG}"
  before_script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login $CI_REGISTRY -u $CI_REGISTRY_USER --password-stdin
    - export REGISTRY=$(grep TIMEIO_IMAGE_REGISTRY .env | cut -d'=' -f2)
    - export PROD_TAG="prod-${CI_COMMIT_TAG}"
    - echo "PROD_TAG is $PROD_TAG"
    - export BUILD_SERVICES="init frost cron-scheduler worker-configdb-updater worker-db-setup"
  after_script:
    - docker logout
  script:
    - docker compose pull -q $BUILD_SERVICES
    - |
      for image in $(docker images --format '{{ .Repository }}'); do
        docker tag $image:main $image:$PROD_TAG;
        echo "pushing $image:$PROD_TAG";
        #docker push $image:PROD_TAG;
      done
    - docker images
  tags:
    - "dind"