---
stage-cve-scan:
  image: "docker:${DOCKER_IMAGE_TAG}"
  stage: "scan"
  needs:
    - "stage-tag-images-in-registry"
  variables:
    TRIVY_DISABLE_VEX_NOTICE: "true"
  before_script:
    # Copy .env.example to .env to pull `latest` images
    - "cp .env.example .env"
    # Install Trivy in the pipeline environment
    - "apk add --no-cache curl"
    - "curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin v${TRIVY_VERSION}"
  script:
    - "docker compose pull -q"
    - |
      for image in $(docker images --format "{{.Repository}}:{{.Tag}}" | grep -v "<none>"); do
        echo "Scanning $image";
        trivy image $image -q --severity CRITICAL >> critical_all.cve;
        trivy image $image -q --severity CRITICAL --ignore-unfixed >> critical_fixed.cve;
        trivy image $image -q --severity HIGH >> high_all.cve;
        trivy image $image -q --severity HIGH --ignore-unfixed >> high_fixed.cve; 
      done
    - ls -la *.cve
    - cat *.cve
  artifacts:
    paths:
      - "*.cve"
    expire_in: 30 days
  rules:
    # Always run if pipeline is triggered by a push on main and latest/date image tagging was successful
    - if: "$CI_COMMIT_BRANCH == 'main' && $CI_PIPELINE_SOURCE == 'push'"
      when: on_success
  tags:
    - "dind"

prod-cve-scan:
  image: "docker:${DOCKER_IMAGE_TAG}"
  stage: "scan"
  needs:
    - "prod-tag-images-in-registry"
  variables:
    TRIVY_DISABLE_VEX_NOTICE: "true"
  before_script:
    # As this job has 
    # Install Trivy in the pipeline environment
    - "apk add --no-cache curl"
    - "curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin v${TRIVY_VERSION}"
  script:
    # As job has `needs` dependency tracing back to the build job, we can use the .env defined there
    # This will pull images tagged main instead of prod-${COMMIT_TAG}
    # They are the same images, just retagged in the `prod-tag-imags-in-registry` job
    - "docker compose pull -q"
    - |
      for image in $(docker images --format "{{.Repository}}:{{.Tag}}" | grep -v "<none>"); do
        echo "Scanning $image";
        trivy image $image -q --severity CRITICAL >> critical_all.cve;
        trivy image $image -q --severity CRITICAL --ignore-unfixed >> critical_fixed.cve;
        trivy image $image -q --severity HIGH >> high_all.cve;
        trivy image $image -q --severity HIGH --ignore-unfixed >> high_fixed.cve; 
      done
    - ls -la *.cve
    - cat *.cve
  artifacts:
    paths:
      - "*.cve"
    expire_in: 30 days
  rules:
    # Always run if pipeline is triggered by a push on main and prod image tagging was successful
    - if: "$CI_COMMIT_TAG && $CI_COMMIT_REF_PROTECTED"
      when: on_success
  tags:
    - "dind"