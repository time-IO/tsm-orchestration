---
services:

  worker-configdb-updater:
    volumes:
      - "${DEV_CONFIGDB_UPDATER_SRC_DIR:-../timeio-configdb-updater/src}:/usr/src/app"

  worker-object-storage-setup:
    volumes:
      - "${DEV_DISPATCHER_SRC_DIR:-../tsm-dispatcher/src}:/home/appuser/app/src"

  worker-db-setup:
    volumes:
      - "${DEV_DISPATCHER_SRC_DIR:-../tsm-dispatcher/src}:/home/appuser/app/src"

  worker-file-ingest:
    volumes:
      - "${DEV_DISPATCHER_SRC_DIR:-../tsm-dispatcher/src}:/home/appuser/app/src"

  worker-frost-setup:
    volumes:
      - "${DEV_DISPATCHER_SRC_DIR:-../tsm-dispatcher/src}:/home/appuser/app/src"

  worker-run-qaqc:
    volumes:
      - "${DEV_QAQC_SRC_DIR:-../timeio-qaqc/timeio_qaqc}:/app/timeio_qaqc"
      - "${DEV_QAQC_SRC_DIR:-../timeio-qaqc/app.py}:/app/app.py"

  worker-mqtt-ingest:
    volumes:
      - "${DEV_DISPATCHER_SRC_DIR:-../tsm-dispatcher/src}:/home/appuser/app/src"

  worker-mqtt-user-creation:
    volumes:
      - "${DEV_DISPATCHER_SRC_DIR:-../tsm-dispatcher/src}:/home/appuser/app/src"

  worker-grafana-dashboard:
    volumes:
      - "${DEV_DISPATCHER_SRC_DIR:-../tsm-dispatcher/src}:/home/appuser/app/src"

  worker-grafana-user-orgs:
    volumes:
      - "${DEV_DISPATCHER_SRC_DIR:-../tsm-dispatcher/src}:/home/appuser/app/src"

  worker-crontab-setup:
    volumes:
      - "${DEV_DISPATCHER_SRC_DIR:-../tsm-dispatcher/src}:/home/appuser/app/src"

  tsm-extractor:
    image: "registry.hzdr.de/ufz-tsm/tsm-extractor/extractor:${EXTRACTOR_IMAGE_TAG}"
    build:
      context: "../tsm-extractor"

  basic-demo-scheduler:
    volumes:
      - "${DEV_EXTRACTOR_SRC_DIR:-../tsm-extractor/src}:/home/appuser/app/src"
      - "${DEV_SCHEDULER_SRC_DIR:-../tsm-basic-demo-scheduler/src}:/home/appuser/app/basic_demo_scheduler"
    ports:
      - "127.0.0.1:5000:5000"
    build:
      context: "../tsm-basic-demo-scheduler"
      args:
        EXTRACTOR_IMAGE_TAG: "${EXTRACTOR_IMAGE_TAG}"

  frontend:
    environment:
      - "DJANGO_HELMHOLTZ_CLIENT_ID=${DJANGO_HELMHOLTZ_CLIENT_ID:-timeIO-client}"
      - "DJANGO_HELMHOLTZ_CLIENT_SECRET=${DJANGO_HELMHOLTZ_CLIENT_SECRET:-pUolEnz1Ve5djx9oUpw1KBgB0YgIlUOQ}"
      - "DJANGO_HELMHOLTZ_AAI_CONF_URL=${DJANGO_HELMHOLTZ_AAI_CONF_URL:-http://keycloak:8081/keycloak/realms/demo/.well-known/openid-configuration}"
    volumes:
      - "${DEV_FRONTEND_DIR:-../tsm-frontend}:/home/appuser/app"

  visualization:
    environment:
      - "GF_AUTH_GENERIC_OAUTH_SCOPES=openid email profile eduperson_principal_name"
      - "GF_AUTH_GENERIC_OAUTH_CLIENT_ID=${DJANGO_HELMHOLTZ_CLIENT_ID:-timeIO-client}"
      - "GF_AUTH_GENERIC_OAUTH_CLIENT_SECRET=${DJANGO_HELMHOLTZ_CLIENT_SECRET:-pUolEnz1Ve5djx9oUpw1KBgB0YgIlUOQ}"
      - "GF_AUTH_GENERIC_OAUTH_AUTH_URL=${GF_AUTH_GENERIC_OAUTH_AUTH_URL:-http://localhost/keycloak/realms/demo/protocol/openid-connect/auth}"
      - "GF_AUTH_GENERIC_OAUTH_TOKEN_URL=${GF_AUTH_GENERIC_OAUTH_TOKEN_URL:-http://keycloak:8081/keycloak/realms/demo/protocol/openid-connect/token}"
      - "GF_AUTH_GENERIC_OAUTH_API_URL=${GF_AUTH_GENERIC_OAUTH_API_URL:-http://keycloak:8081/keycloak/realms/demo/protocol/openid-connect/userinfo}"

  proxy:
    volumes:
      - "./nginx/tsm.dev.keycloak.conf:/etc/nginx/conf.d/default.conf:ro"

  keycloak:
    image: "quay.io/keycloak/keycloak:24.0.3"
    ports:
      - "${KEYCLOAK_PORT}:${KEYCLOAK_PORT}"
    user: "${KEYCLOAK_UID:-1000}:${KEYCLOAK_GID:-1000}"
    environment:
      KEYCLOAK_ADMIN: "admin"
      KEYCLOAK_ADMIN_PASSWORD: "admin"
      KC_DB: postgres
      KC_DB_URL_DATABASE: keycloak
      KC_DB_SCHEMA: public
      KC_DB_URL: jdbc:postgresql://keycloak-postgres/keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: password
      KC_HTTP_RELATIVE_PATH: ${KC_HTTP_RELATIVE_PATH:-/keycloak}
      KC_PROXY_HEADERS: ${KC_PROXY_HEADERS:-xforwarded}
      KC_HOSTNAME_URL: ${KC_HOSTNAME_URL:-http://localhost/keycloak}
    volumes:
      - "./keycloak/keycloak-init.json:/opt/keycloak/data/import/keycloak-init.json"
    command:
      - start-dev
      - --import-realm
      - --http-port=${KEYCLOAK_PORT}
    depends_on:
      keycloak-postgres:
        condition: service_healthy

  keycloak-postgres:
    image: "postgres:14-alpine"
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: password
    volumes:
      - "keycloak-data:/var/lib/postgresql/data/"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U keycloak" ]
      interval: "${POSTGRES_HEALTHCHECK_INTERVAL}"
      timeout: 5s
      retries: 5

  timeio-db-api:
    ports:
      - "127.0.0.1:8001:8001"

volumes:
  keycloak-data:

