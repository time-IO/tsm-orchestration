############################################################
# Note on this file's structure:
#
# Environment variables are described and possibly annotated with the following annotations:
#   @security ------------------------- Variable is security-relevant.
#   @service [SERVICE_NAME] ----------- Variable is used in [SERVICE_NAME].
#   @dependant [DEPENDANT_VARIABLE] --- Variable is used for calculating [DEPENDANT_VARIABLE]
#   @choices [CHOICES] ---------------- Comma-separated list of possible values.
#   @dev ------------------------------ Value used in development environment.
#
# Available service names:
#   init,
#   proxy,
#   mqtt_broker,
#   mqtt_cat,
#   object_storage,
#   database,
#   visualization,
#   thing_management,
#   frost,
#   tsmdl,
#   db_api,
#   flyaway,
#   worker,
#   cron-scheduler,
#   keycloak
############################################################


############################################################
# Image tags
############################################################

# @service init
INIT_ALPINE_BASE_IMAGE_TAG=latest
TIMEIO_INIT_IMAGE_TAG=latest

# @service proxy
PROXY_NGINX_IMAGE_TAG=latest

# @service database
DATABASE_POSTGRES_IMAGE_TAG=17
DATABASE_TIMESCALE_BASE_IMAGE_TAG=pg17
TIMEIO_DATABASE_IMAGE_TAG=latest

# @service mqtt_broker
MQTT_BROKER_MOSQUITTO_IMAGE_TAG=latest

# @service mqtt_cat
MQTT_CAT_MOSQUITTO_IMAGE_TAG=latest

# @service object_storage
OBJECT_STORAGE_MINIO_IMAGE_TAG=latest

# @service visualization
VISUALIZATION_GRAFANA_IMAGE_TAG=latest

# @service thing_management
THING_MANAGEMENT_IMAGE_TAG=latest

# @service frost
FROST_TOMCAT_BASE_IMAGE_TAG=10
TIMEIO_FROST_IMAGE_TAG=latest

# @service tsmdl
TSMDL_IMAGE_TAG=latest

# @service db_api
DB_API_IMAGE_TAG=latest

# @service flyway
FLYWAY_IMAGE_TAG=10

# @service worker
CONFIGDB_UPDATER_PYTHON_BASE_IMAGE_TAG=3.11-slim
TIMEIO_CONFIGDB_UPDATER_IMAGE_TAG=latest

# @service worker
DISPATCHER_DEBIAN_BASE_IMAGE_TAG=bullseye-slim
TIMEIO_DISPATCHER_IMAGE_TAG=latest

# @service cron-scheduler
CRON_SCHEDULER_DEBIAN_BASE_IMAGE_TAG=bullseye-slim
TIMEIO_CRON_SCHEDULER_IMAGE_TAG=latest

# @service monitoring
MONITORING_CADVISOR_IMAGE_TAG=v0.49.2


############################################################
# GLOBAL VARIABLES
############################################################

# @service init
# @service database
# @service cron-scheduler
# @service frost
# @service worker
TIMEIO_IMAGE_REGISTRY=registry.hzdr.de/ufz-tsm/tsm-orchestration

# @service proxy
# @service mqtt_broker
# @service mqtt_cat
# @service object_storage
# @service database
# @service visualization
# @service thing_management
# @service frost
# @service tsmdl
# @service db_api
# @service worker
# @choices: always, on-failure, unless-stopped, no
# The restart policy for containers/services.
SERVICE_RESTART_POLICY=on-failure

# @service init
# @service database
# @service object-storage
# @service visualization
# @service flyway
# @service proxy
# @service cron-scheduler
# User ID used for user-specific access control inside containers.
# Note: UID `1000` is convention for the first exisitng non-root user.
UID=1000

# @service init
# @service database
# @service object-storage
# @service visualization
# @service flyway
# @service proxy
# @service cron-scheduler
# Group ID used for group-specific access control inside containers.
# Note: GID `1000` is convention for the first exisitng non-root user.
GID=1000

# @security
# @service thing_management
# @service worker
# @service cron-scheduler
# Encryption key for secure communication between services.
# Used for encrypting and decrypting security-relevant secrets.
# One can generate a new key like this:
# $ python -c "import cryptography.fernet as c; print(c.Fernet.generate_key().decode())"
FERNET_ENCRYPTION_SECRET=CKoB---DEFAULT-DUMMY-SECRET---0exKVH0QDLy1B=


############################################################
# Log size limits
############################################################

# The maximum size of the mqtt-broker service log before it's rolled.
# A positive integer plus a modifier representing the unit of measure (k, m, or g).
# Default value applied for most services.
# Note: The maximum total log size of a service equals the respective MAX_LOG_FILE_SIZE times the MAX_LOG_FILE_COUNT.
DEFAULT_MAX_LOG_FILE_SIZE=10m

# The maximum number of log files for the mqtt-broker service that can be present.
# If rolling the logs creates excess files, the oldest file is removed.
# Default value applied for most services.
# Note: The maximum total log size of a service equals the respective MAX_LOG_FILE_SIZE times the MAX_LOG_FILE_COUNT.
DEFAULT_MAX_LOG_FILE_COUNT=2

##############################
# Service-specific log sizes
##############################

# @service worker
# Limiting logs to size that equals ~1 week of logging
WORKER_RUN_QAQC_MAX_LOG_FILE_SIZE=100m

# @service proxy
# Limiting logs to size that equals ~1 week of logging
WROKER_FILE_INGEST_MAX_LOG_FILE_SIZE=30m

# @service proxy
# Limiting logs to size that equals ~1 week of logging
PROXY_MAX_LOG_FILE_SIZE=150m

# @service proxy
# Limiting logs to size that equals ~1 week of logging
CRON_SCHEDULER_MAX_LOG_FILE_SIZE=3g

# @service db_api
# Limiting logs to size that equals ~1 week of logging
DB_API_MAX_LOG_FILE_SIZE=25m

# @service mqtt-cat
MQTT_CAT_LOG_SIZE=100K

# @service mqtt-cat
MQTT_CAT_FILE_COUNT=10

# @service mqtt-broker
MQTT_BROKER_LOG_SIZE=100K

# @service mqtt-broker
MQTT_BROKER_FILE_COUNT=10


############################################################
# Proxy (Nginx)
############################################################

# @service proxy
# @dependant OBJECT_STORAGE_BROWSER_REDIRECT_URL
# @dependant VISUALIZATION_PROXY_URL
# @dependant STA_PROXY_URL
# @dependant THING_MANAGEMENT_STA_ROOT_URL
# URL of the proxy (Nginx) server managing incoming requests.
# Landing page of running time.IO application.
PROXY_URL=http://localhost:80

# @service proxy
# Path to the TLS certificate for secure communication in the proxy service.
PROXY_TLS_CERT_PATH=/tmp/tsm/fullchain.pem

# @service proxy
# Path to the TLS private key for secure communication in the proxy service.
PROXY_TLS_KEY_PATH=/tmp/tsm/privkey.pem

# @service proxy
# @dependant PROXY_PLAIN_PORT
# @dependant PROXY_TLS_PORT
# @dependant PROXY_MINIO_PORT
PROXY_HOST=127.0.0.1

# @service proxy
# The port mapping (HOST_PORT:CONTAINER_PORT) for HTTP traffic in the proxy service.
PROXY_PLAIN_PORT_MAPPING=${PROXY_HOST}:80:80

# @service proxy
# The port mapping (HOST_PORT:CONTAINER_PORT) for HTTPS traffic in the proxy service.
PROXY_TLS_PORT_MAPPING=${PROXY_HOST}:443:443

# @service proxy
# The port mapping (HOST_PORT:CONTAINER_PORT) used for Minio storage access in the proxy service.
PROXY_MINIO_PORT_MAPPING=${PROXY_HOST}:9000:9000

# @service proxy
PROXY_SITE_CONFIG_FILE=tsm.dev.conf


############################################################
# Database (PostgreSQL)
############################################################

# @service database
# The endpoint for the database persistence volume.
# Setting it to `database` causes the service to use a pre-defined docker volume.
# Alternatively, set it to a local path to mount a directory.
DATABASE_PERSISTENCE_VOLUME=database

# @service database
DATABASE_USER=postgres

# @security
# @service database
DATABASE_PASSWORD=postgres

# @service database
# @dependant DATABASE_PORT
DATABASE_HOST=127.0.0.1

# @service database
DATABASE_PORT=${DATABASE_HOST}:5432

# @service database
# Healtcheck interval for database service.
# Time between health checks during the start period.
# Defaults to 30s.
DATABASE_HEALTHCHECK_INTERVAL=10s

# @service database
# Options for running psql
# See https://www.postgresql.org/docs/current/app-psql.html
DATABASE_POSTGRES_EXTRA_PARAMS=

# @service database
# Path to the TLS certificate for PostgreSQL secure connections.
DATABASE_TLS_CERT_PATH=/tmp/c8cf2d92-73cd-11ec-b035-54e1ad7c5c19

# @service database
# Path to the TLS private key for PostgreSQL secure connections.
DATABASE_TLS_KEY_PATH=/tmp/c8cf2d92-73cd-11ec-b035-54e1ad7c5c19

##############################
# ConfigDB readonly access
##############################

# @dependant CONFIGDB_READONLY_DSN
CONFIGDB_READONLY_USER=configdb

# @security
# @dependant CONFIGDB_READONLY_DSN
CONFIGDB_READONLY_PASSWORD=configdb

# @dependant CONFIGDB_READONLY_DSN
CONFIGDB_READONLY_HOST=database

# @dependant CONFIGDB_READONLY_DSN
CONFIGDB_READONLY_DB=postgres

# @dependant CONFIGDB_READONLY_DSN
# Port of the ConfigDB
CONFIGDB_READONLY_PORT=5432

# @security
# @service flyway
# @service worker
# Connection (DSN) for read-only-accessing the ConfigDB
CONFIGDB_READONLY_DSN="postgresql://${CONFIGDB_READONLY_USER}:${CONFIGDB_READONLY_PASSWORD}@${CONFIGDB_READONLY_HOST}:${CONFIGDB_READONLY_PORT}/${CONFIGDB_READONLY_DB}"

##############################
# Admin access
##############################

# @dependant CRON_DATABASE_ADMIN_USER
# @dependant DATABASE_ADMIN_DSN
DATABASE_ADMIN_USER=postgres

# @dependant CRON_DATABASE_ADMIN_PASSWORD
# @dependant DATABASE_ADMIN_DSN
DATABASE_ADMIN_PASSWORD=postgres

# @dependant CRON_DATABASE_ADMIN_HOST
# @dependant DATABASE_ADMIN_DSN
DATABASE_ADMIN_HOST=database

# @dependant CRON_DATABASE_ADMIN_DB_NAME
# @dependant DATABASE_ADMIN_DSN
DATABASE_ADMIN_DB_NAME=postgres

# @service db_api
# @service flyway
# @service worker
# @service cron-scheduler
# @service tsmdl
# Connection (DSN) for accessing the Postgres DB (administrator privilege, former CREATEDB_POSTGRES_*)
DATABASE_ADMIN_DSN="postgresql://${DATABASE_ADMIN_USER}:${DATABASE_ADMIN_PASSWORD}@${DATABASE_ADMIN_HOST}/${DATABASE_ADMIN_DB_NAME}"

##############################
# Database-API
##############################

# @service db_api
# Arguments to run the DB-API/FastAPI service with
# See https://www.uvicorn.org/settings/
DB_API_UVICORN_ARGS=


############################################################
# Mosquitto and MQTT-related
############################################################

# @service mqtt-broker
# The endpoint for mosquittos authentication and persistence volume.
# Setting it to `mqtt-broker` causes the service to use a pre-defined docker volume.
# Alternatively, set it to a local path to mount a directory.
MQTT_PERSISTENCE_VOLUME=mqtt-broker

# @service mqtt_broker
MQTT_USER=mqtt

# @security
# @service mqtt_broker
MQTT_PASSWORD=mqtt

# @service mqtt_broker
# @dependant MQTT_PORT
# @dependant MQTT_PORT_SECURE
# Host of the Mosquitto MQTT broker.
MQTT_HOST=127.0.0.1

# @service mqtt_broker
# Port of the Mosquitto MQTT broker for non-secure connections.
MQTT_PORT=${MQTT_HOST}:1883

# @service mqtt_broker
# The port used for secure MQTT connections (TLS).
MQTT_PORT_SECURE=${MQTT_HOST}:8883

# @service worker
# @choices: 0, 1, 2
# Quality of Service (QoS) level for MQTT messages.
# 0: At most once delivery, no acknowledgment.
# 1: At least once delivery, acknowledgment required.
# 2: Exactly once delivery, highest level of acknowledgment.
MQTT_QOS=2

# @service mqtt_broker
# @choices True, False
# Whether to use a clean session for MQTT connections.
# If true, no previous state is stored between connections.
MQTT_CLEAN_SESSION=False

# @service mqtt_broker
# Healtcheck interval for mqtt-broker service.
# Time between health checks during the start period.
# Defaults to 30s.
MQTT_BROKER_HEALTHCHECK_INTERVAL=10s

# @service mqtt_broker
MQTT_INGEST_USER=mqtt_ingest

# @security
# @service mqtt_broker
MQTT_INGEST_PASSWORD=neeTham4iexee5aiwoop8Eeroxeichahfo6zezai

# @service mqtt_broker
# Path to the configuration file for Mosquitto MQTT broker.
MQTT_MOSQUITTO_CONFIG=./mosquitto/mosquitto.conf

# @service mqtt_broker
# Path to the TLS configuration file for Mosquitto MQTT broker.
# Note: Change this to ./mosquitto/mosquitto.tls.conf to enable TLS
MQTT_MOSQUITTO_TLS_CONFIG=./mosquitto/

# @service mqtt_broker
# Path to the TLS certificate for the (Mosquitto) MQTT broker.
MQTT_MOSQUITTO_TLS_CERT_PATH=/tmp/c8cf2d92-73cd-11ec-b035-54e1ad7c5c19

# @service mqtt_broker
# Path to the TLS private key for the (Mosquitto) MQTT broker.
MQTT_MOSQUITTO_TLS_KEY_PATH=/tmp/c8cf2d92-73cd-11ec-b035-54e1ad7c5c19

# @service mqtt_broker
# Path to the TLS private key for the (Mosquitto) MQTT broker.
MQTT_MOSQUITTO_TLS_CA_PATH=/tmp/c8cf2d92-73cd-11ec-b035-54e1ad7c5c19

# @service mqtt_broker
# Used for PostgreSQL authentication for the MQTT broker.
MQTT_AUTH_POSTGRES_HOST=database

# @service mqtt_broker
# Used for PostgreSQL authentication for the MQTT broker.
MQTT_AUTH_POSTGRES_PORT=5432

# @service mqtt_broker
# Used for PostgreSQL authentication for the MQTT broker.
MQTT_AUTH_POSTGRES_USER=mqtt_auth

# @security
# @service mqtt_broker
# Used for PostgreSQL authentication for the MQTT broker.
MQTT_AUTH_POSTGRES_PASS=secret

# @service mqtt_broker
# Used for PostgreSQL authentication for the MQTT broker.
MQTT_AUTH_POSTGRES_DB=postgres

# @security
# @service mqtt_broker
# @choices disable, require, verify-full
# Used for PostgreSQL authentication for the MQTT broker.
# Note: Set to verify-full or at least require when running in production
MQTT_AUTH_PG_TLSMODE=disable


############################################################
# Object Storage (MinIO)
############################################################

# @service object_storage
# The endpoint for (MinIO's) object storage persistence volume.
# Setting it to `object-storage` causes the service to use a pre-defined docker volume.
# Alternatively, set it to a local path to mount a directory.
OBJECT_STORAGE_PERSISTENCE_VOLUME=object-storage

# @service object_storage
OBJECT_STORAGE_ROOT_USER=minioadmin

# @security
# @service object_storage
OBJECT_STORAGE_ROOT_PASSWORD=minioadmin

# @service object_storage
OBJECT_STORAGE_SERVER_URL=

# @service object_storage
# @choices True, False
# Whether to enable secure mode (TLS) for Minio
# [!] Set to True when running in production!
OBJECT_STORAGE_SECURE=False

# @service object_storage
OBJECT_STORAGE_HOST=object-storage:9000

# @service object_storage
# Healtcheck interval for object-storage service.
# Time between health checks during the start period.
# Defaults to 30s.
OBJECT_STORAGE_HEALTHCHECK_INTERVAL=2s

# @service object_storage
# Address under which the object-storage service is available externally
OBJECT_STORAGE_BROWSER_REDIRECT_URL=${PROXY_URL}/object-storage/

# @service object_storage
OBJECT_STORAGE_SFTP_HOSTKEY=./data/minio/certs/id_ed25519

# @service object_storage
# @dependant OBJECT_STORAGE_SFTP_PORT
OBJECT_STORAGE_SFTP_HOST=127.0.0.1

# @service object_storage
OBJECT_STORAGE_SFTP_PORT=${OBJECT_STORAGE_SFTP_HOST}:40022

# @service object_storage
OBJECT_STORAGE_FTP_TLS_CRT=./data/minio/certs/minio-ftp.crt

# @service object_storage
OBJECT_STORAGE_FTP_TLS_KEY=./data/minio/certs/minio-ftp.key

# @service object_storage
# @dependant OBJECT_STORAGE_FTP_PORT
# @dependant OBJECT_STORAGE_FTP_PASV_PORTS
OBJECT_STORAGE_FTP_HOST=127.0.0.1

# @service object_storage
OBJECT_STORAGE_FTP_PORT=${OBJECT_STORAGE_FTP_HOST}:40021

# @service object_storage
OBJECT_STORAGE_FTP_PASV_PORTS_MAPPING=${OBJECT_STORAGE_FTP_HOST}:30000-30010:30000-30010


############################################################
# Visualization (Grafana)
############################################################

# @service visualization
# The endpoint for grafanas persistence volume.
# Setting it to `visualization` causes the service to use a pre-defined docker volume.
# Alternatively, set it to a local path to mount a directory.
VISUALIZATION_PERSISTENCE_VOLUME=visualization

# @service visualization
# The username for Grafana authentication.
VISUALIZATION_USER=grafana

# @security
# @service visualization
# The password for Grafana authentication.
VISUALIZATION_PASSWORD=grafana

# @service visualization
# Address under which the visualization service is running
VISUALIZATION_URL=http://visualization:3000

# @service visualization
VISUALIZATION_DEFAULT_DATASOURCE_URL=database:5432

# @service visualization
VISUALIZATION_DEFAULT_DATASOURCE_DATABASE=postgres

# @service visualization
VISUALIZATION_DEFAULT_DATASOURCE_USER=${DATABASE_ADMIN_USER}

# @service visualization
VISUALIZATION_DEFAULT_DATASOURCE_PASSWORD=${DATABASE_ADMIN_PASSWORD}

# @service visualization
# @choices disable, require, verify-ca, verify-full
# Grafana postgres client SSL mode
VISUALIZATION_DEFAULT_DATASOURCE_SSLMODE=disable

# @service visualization
VISUALIZATION_SERVER_PROTOCOL=http

# @service visualization
VISUALIZATION_GENERIC_OAUTH_AUTH_URL=https://login-dev.helmholtz.de/oauth2-as/oauth2-authz

# @service visualization
VISUALIZATION_GENERIC_OAUTH_TOKEN_URL=https://login-dev.helmholtz.de/oauth2/token

# @service visualization
VISUALIZATION_GENERIC_OAUTH_API_URL=https://login-dev.helmholtz.de/oauth2/userinfo

# @service visualization
# Address under which the visualization service is available externally
VISUALIZATION_PROXY_URL=${PROXY_URL}/visualization/


############################################################
# Frontend (Django)
############################################################

# @service thing_management
THING_MANAGEMENT_DJANGO_SUPERUSER_USERNAME=admin

# @security
# @service thing_management
# [!] Change this, when exposing the app to a network!
THING_MANAGEMENT_DJANGO_SUPERUSER_PASSWORD=admin

# @service thing_management
THING_MANAGEMENT_DJANGO_SUPERUSER_EMAIL=example@example.com

# @service thing_management
# @choices: 0, 1
# Debug mode for Django
# [!] Set to False (0) when running in production.
THING_MANAGEMENT_DJANGO_DEBUG=0

# @service thing_management
# Frontend DB credentials
THING_MANAGEMENT_DATABASE_HOST=database

# @service thing_management
# Frontend DB credentials
THING_MANAGEMENT_DATABASE_DB_NAME=postgres

# @service thing_management
# Frontend DB credentials
THING_MANAGEMENT_DATABASE_USER=frontenddb

# @security
# @service thing_management
THING_MANAGEMENT_DATABASE_PASS=frontenddb

# @service thing_management
# @service mqtt-broker
THING_MANAGEMENT_MQTT_HOST=mqtt-broker

# @service thing_management
# @service mqtt-broker
THING_MANAGEMENT_MQTT_USER=frontendbus

# @security
# @service thing_management
# @service mqtt-broker
THING_MANAGEMENT_MQTT_PASS=frontendbus

# @security
# @service thing_management
# The secret key used by Django for cryptographic hashing.
# [!] Change this, when exposing the app to a network.
THING_MANAGEMENT_DJANGO_SECRET_KEY=NlnjUaFieRyzPnGfYGvEsHCCfU0ilDv3VRsXcSmbJ85EXjBgx1xYjvzqt7B0q12Q

# @service thing_management
# Path under which the frontend service is running.
# Compunded with PROXY_URL, it results in the address under which the frontend service is available externally
THING_MANAGEMENT_DJANGO_BASE_PATH=/frontend/

# @service thing_management
# A comma-separated list of trusted origins for unsafe requests (e.g. POST).
# Also supports subdomains, for example 'https://*.example.com'.
THING_MANAGEMENT_DJANGO_TRUSTED_ORIGINS=http://localhost:80,https://tsm.intranet.ufz.de

# @service thing_management
# Comma-separated list of host/domain names that the Django site can serve. (Security measure to prevent HTTP Host header attacks)
# Values beginning with a period can be used as subdomain wildcard,
# for example '.example.com' will match 'www.example.com' and any subdomains.
THING_MANAGEMENT_DJANGO_ALLOWED_HOSTS=.localhost,127.0.0.1,[::1]

# @security
# @service thing_management
# @choices disable, require, verify-full
# [!] Change this to verify-full when using a remote database!
THING_MANAGEMENT_DJANGO_POSTGRES_SSLMODE=disable

# @service thing_management
# @dev timeIO-client
# Client ID for Helmholtz AAI.
THING_MANAGEMENT_DJANGO_HELMHOLTZ_CLIENT_ID=ufz-tsm

# @security
# @service thing_management
# @dev pUolEnz1Ve5djx9oUpw1KBgB0YgIlUOQ
# Client secret for Helmholtz AAI.
THING_MANAGEMENT_DJANGO_HELMHOLTZ_CLIENT_SECRET=00000000000000000000

# @service thing_management
# @dev http://keycloak:8081/keycloak/realms/demo/.well-known/openid-configuration
# Well-Known configuration of the Helmholtz AAI authentication endpoint.
THING_MANAGEMENT_DJANGO_HELMHOLTZ_AAI_CONF_URL=https://login-dev.helmholtz.de/oauth2/.well-known/openid-configuration

# @service thing_management
# Comma-separated list of Virtual Organisations (VOs) of authenticated users that can be used for projects/groups.
THING_MANAGEMENT_ALLOWED_VOS=UFZ-Timeseries-Management

# @service thing_management
# The STA endpoint queried for QA/QC-Settings
THING_MANAGEMENT_STA_ROOT_URL=${PROXY_URL}/sta

# @service thing_management
# The SaQC version for QA/QC-Settings
THING_MANAGEMENT_QAQC_SETTING_SAQC_VERSION=v2.6.0


############################################################
# Flyway
############################################################

# @service flyway
FLYWAY_BASELINE_VERSION=0.0.1

##############################
# Sensor Management System
##############################

# @service flyway
SMS_DB_USER=postgres

# @security
# @service flyway
SMS_DB_PASSWORD=postgres

# @service flyway
SMS_DB_PORT=5432

# @service flyway
SMS_DB_DB=postgres

# @service flyway
SMS_DB_HOST=database

# @service flyway
# @dependant CRON_SMS_API_URL
SMS_URL=https://web-intern-stage.app.ufz.de/sms/

# @service flyway
# @service cron-scheduler
# @dependant CRON_SMS_ACCESS_TYPE
# @choices db, api
# Access type for data in the Sensor Management System (SMS)
SMS_ACCESS_TYPE=db

##############################
# Controlled vocabulary
##############################

# @service flyway
CV_DB_HOST=database

# @service flyway
CV_DB_DB=postgres

# @service flyway
CV_DB_PORT=5432

# @service flyway
CV_DB_USER=postgres

# @service flyway
CV_DB_PASSWORD=postgres

# @service flyway
# @dependant CRON_CV_API_URL
# Base address of the SMS Controlled Vocabulary (CV)
CV_URL=https://sms-cv.helmholtz.cloud/sms/cv/

# @service flyway
# @dependant CRON_CV_ACCESS_TYPE
# @choices db, api
# Access type for the SMS Controlled Vocabulary (CV)
CV_ACCESS_TYPE=db

############################################################
# STA-related
############################################################

# @service tsmdl
# @service worker
# Address under which the STA service is available externally, provides a list of STA endpoints.
STA_PROXY_URL=${PROXY_URL}/sta/

##############################
# FROST
##############################

# @service frost
# Visit changelog at https://github.com/FraunhoferIOSB/FROST-Server
# Check compatibility with STA_TOMCAT_IMAGE_TAG!
STA_FROST_VERSION=2.5.3

# @service frost worker
# The path to the shared tomcat context persistence volume.
# Setting it to `tomcat-context` causes the service to use a pre-defined docker volume.
# Alternatively, set it to a local path to mount a directory.
FROST_PERSISTENCE_VOLUME=tomcat-context

##############################
# TSM Decoupling Layer (TSMDL)
##############################

# @service tsmdl
# @choices local, staging, production
# The environment in which the TSMDL is running.
# Note:
#   local:      does not require authentication
#   staging:    authenticates against Helmholtz AAI Dev Login
#   production: authenticates against Helmholtz AAI
TSMDL_ENVIRONMENT=local

# @service tsmdl
# Arguments to run the TSMDL/FastAPI service with
# See https://www.uvicorn.org/settings/
TSMDL_UVICORN_ARGS=


############################################################
# Worker
############################################################

# @service worker
DB_API_BASE_URL=http://timeio-db-api:8001

# @service worker
# @choices true, false
# Whether to enable journaling on worker services.
JOURNALING=true

# @service worker
# @choices: NOTSET, DEBUG, INFO, WARN, ERROR, CRITICAL
# Log level for worker services.
# See https://docs.python.org/3/library/logging.html#logging-levels
LOG_LEVEL=INFO


############################################################
# Monitoring (cAdvisor)
############################################################

# @service monitoring
# @dependant MONITORING_PORT
MONITORING_HOST=127.0.0.1

# @service monitoring
MONITORING_PORT=${MONITORING_HOST}:8080


############################################################
# cron-scheduler (debian, python)
############################################################

# @service cron-scheduler worker
# The path to the shared crontab persistence volume.
# Setting it to `crontab` causes the service to use a pre-defined docker volume.
# Alternatively, set it to a local path to mount a directory.
CRON_PERSISTENCE_VOLUME=crontab

# @service cron-scheduler
# @choices true, false
CRON_SETUP_SERVICE=true

# @service cron-scheduler
CRON_DATABASE_ADMIN_USER=${DATABASE_ADMIN_USER}

# @service cron-scheduler
CRON_DATABASE_ADMIN_PASSWORD=${DATABASE_ADMIN_PASSWORD}

# @service cron-scheduler
CRON_DATABASE_ADMIN_HOST=${DATABASE_ADMIN_HOST}

# @service cron-scheduler
CRON_DATABASE_ADMIN_DB_NAME=${DATABASE_ADMIN_DB_NAME}

# @service cron-scheduler
# @choices db, api
# Access type for the Sensor Management System (SMS) API
CRON_SMS_ACCESS_TYPE=${SMS_ACCESS_TYPE}

# @service cron-scheduler
# Base URL for the SMS API endpoint.
CRON_SMS_API_URL=${SMS_URL}backend/api/v1/

# @security
# @service cron-scheduler
# API token used for authentication with the SMS service.
CRON_SMS_API_TOKEN=00000000000000000000

# @service cron-scheduler
# @choices db, api
# Access type for the SMS Controlled Vocabulary (CV)
CRON_CV_ACCESS_TYPE=${CV_ACCESS_TYPE}

# @service cron-scheduler
# Base address of the SMS Controlled Vocabulary (CV) API
CRON_CV_API_URL=${CV_URL}api/v1/


############################################################
# MQTT Topcis
# Note: topics may be hardcoded in services
############################################################

# @service worker
# Topics may be hardcoded in service
TOPIC_DATA_PARSED=data_parsed

# @service worker
# Topics may be hardcoded in service
TOPIC_OBJECT_STORAGE_NOTIFY=object_storage_notification

# @service worker
# Topics may be hardcoded in service
TOPIC_WORKER_RUN_QAQC_DONE=qaqc_done

# @service worker
# Topics may be hardcoded in service
TOPIC_MQTT_INGEST=mqtt_ingest/#

# @service worker
# Topics may be hardcoded in service
TOPIC_THING_CREATION=thing_creation

# @service worker
# Topics may be hardcoded in service
TOPIC_CONFIG_DB_UPDATE=configdb_update


############################################################
# Dev settings
# Used in docker-compose-dev.example.yml
############################################################

# @service keycloak
KEYCLOAK_PORT=8081
